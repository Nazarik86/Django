# 3. Есть два файла: в одном хранятся ФИО пользователей сайта, а в другом — данные об их хобби.
# Известно, что при хранении данных используется принцип: одна строка — один пользователь,
# разделитель между значениями — запятая. Написать код, загружающий данные из обоих файлов и формирующий из них словарь:
# ключи — ФИО, значения — данные о хобби. Сохранить словарь в файл. Проверить сохранённые данные.
# Если в файле, хранящем данные о хобби, меньше записей, чем в файле с ФИО, задаём в словаре значение None.
# Если наоборот — выходим из скрипта с кодом «1». При решении задачи считать,
# что объём данных в файлах во много раз меньше объема ОЗУ.
# Фрагмент файла с данными о пользователях (users.csv):
#
# Иванов,Иван,Иванович
# Петров,Петр,Петрович
#
# Фрагмент файла с данными о хобби (hobby.csv):
#
# скалолазание,охота
# горные лыжи

import sys
import json

users = []
users_hobby = []
result_dict = {}


# Функция для обработки текста, чтобы вывод был красивее
def clean_data(data):
    return ' '.join(data.split(',')).strip()


# Открываем оба файла и читаем содержимое в строки
with open("users.csv", encoding="utf-8") as str_users:  # Из users.csv в str_users:
    with open("hobby.csv", encoding="utf-8") as str_hobbies:  # Из hobby.csv в str_hobbies
        for hobbies, user in zip(str_hobbies, str_users):
            result_dict[clean_data(user)] = hobbies.strip()  # Обрабатываем с помощью функции и на выводе обрезаем
        for _ in str_hobbies:
            exit(1)  # Выход с кодом 1
        for user in str_users:
            result_dict[clean_data(user)] = None  # По условию, если ФИО больше чем хобби, то присваеваем None
# Выводим результат
print(result_dict)
